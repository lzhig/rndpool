cmake_minimum_required(VERSION 3.0)

project(rndpool C CXX)

macro(source_group_by_dir source_files)
    if(MSVC)
        set(sgbd_cur_dir ${PROJECT_SOURCE_DIR})
        foreach(sgbd_file ${${source_files}})
            #string(REGEX REPLACE ${sgbd_cur_dir}/(.*) \\1 sgbd_fpath ${sgbd_file})
			string(REGEX REPLACE "(.*)/.*" \\1 sgbd_group_name ${sgbd_file})
			string(COMPARE EQUAL ${sgbd_file} ${sgbd_group_name} sgbd_nogroup)
            string(REPLACE "/" "\\" sgbd_group_name ${sgbd_group_name})
            if(sgbd_nogroup)
                set(sgbd_group_name "\\")
            endif(sgbd_nogroup)
            source_group(${sgbd_group_name} FILES ${sgbd_file})
        endforeach(sgbd_file)
    endif(MSVC)
endmacro(source_group_by_dir)

SET(CMAKE_C_COMPILER g++)
SET(CMAKE_CXX_COMPILER g++)

if (NOT MSVC)
    add_definitions(-std=c++11)
endif(NOT MSVC)

file(GLOB_RECURSE HEADER RELATIVE ${PROJECT_SOURCE_DIR} src/*.h)
file(GLOB_RECURSE INC RELATIVE ${PROJECT_SOURCE_DIR} inc/*.h)
if (NOT MSVC)
	set(CMAKE_CXX_FLAGS_DEBUG "-g -O0")
	set(CMAKE_CXX_FLAGS_RELEASE "-g -O0")
	set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "bin/")
	set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "bin/")
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "bin/")
endif (NOT MSVC)

include_directories(BEFORE src) 
aux_source_directory(src SRC)
source_group("src" FILES ${SRC} ${HEADER})
add_library(rndpool STATIC ${SRC} ${HEADER} ${INC})

if (NOT MSVC)
	set_target_properties(rndpool PROPERTIES PREFIX "")
endif (NOT MSVC)
unset(SRC)
unset(HEADER)


file(GLOB_RECURSE HEADER RELATIVE ${PROJECT_SOURCE_DIR} examples/*.h)
include_directories(BEFORE src)
aux_source_directory(examples SRC)
source_group_by_dir(INC)
source_group("src" FILES ${SRC} ${HEADER})
add_executable(example ${SRC} ${HEADER} ${INC})

if (MSVC)
	target_link_libraries(example rndpool)
else (MSVC)
	set(CMAKE_CXX_FLAGS_DEBUG "-g -O0")
	set(CMAKE_CXX_FLAGS_RELEASE "-g -O0")
	target_link_libraries(example rndpool)
endif (MSVC)

add_dependencies(example rndpool)
unset(SRC)
unset(HEADER)
